testX_fwts_vector<-test_set$y[1:576]
testX_fwts_array <- array(data = testX_fwts_vector,dim = c(length(testX_fwts_vector),1,1))
fwts_testX_input_list <- list(
testX_fwts_array,testX_temp_array,testX_dew_array,testX_hum_array,testX_wspd_array,testX_vis_array,testX_pres_array,testX_mon_array,testX_tue_array,testX_wed_array,testX_thu_array,testX_fri_array,testX_sat_array,testX_sun_array,testX_sint_array,testX_cost_array
)
#predictions FWTS Model
predictions_fwts <-
fwts_lstm_model_lag288_mv %>% predict(fwts_testX_input_list, batch_size = 2) %>% .[, 1]
#predictions FWTS Model
predictions_fwts <-
fwts_lstm_model_lag288_mv %>% predict(fwts_testX_input_list, batch_size = 72) %>% .[, 1]
pred_array_fwts <-
array(data = predictions_fwts, dim = c(length(predictions_fwts), 1, 1))
pred_array_fwts
predictions_fwts
predictions_df$fwts_pred <- predictions_fwts
attribute_centre_fwts <-
as.numeric(
read_lines(
"/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/saved_attributes/attribute_centre_fwts_stateful_lag288.txt"
)
)
attribute_scale_fwts <-
as.numeric(
read_lines(
"/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/saved_attributes/attribute_scale_fwts_stateful_lag288.txt"
)
)
#Rescale Predictions using Saved Attributes for Each Feed
predictions_df$fwts_pred <-
(predictions_df$fwts_pred * attribute_scale_fwts + attribute_centre_fwts) ^ 2
predictions_df$fwts_pred <- predictions_fwts
predictions_df$fwts_pred <- predictions_fwts
predictions_df <-
data.frame(matrix(ncol = 4, nrow = 576))
columns = c("datetime",
"brts_pred",
"fwts_pred",
"pats_pred")
predictions_df$fwts_pred <- predictions_fwts
attribute_centre_fwts <-
as.numeric(
read_lines(
"/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/saved_attributes/attribute_centre_fwts_stateful_lag288.txt"
)
)
library(Cubist)
library(caTools)
library(rpart)
library (dplyr)
library(ggplot2)
library(caret)
library(rpart.plot)
library(reticulate)
attribute_centre_fwts <-
as.numeric(
read_lines(
"/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/saved_attributes/attribute_centre_fwts_stateful_lag288.txt"
)
)
library(readr)
attribute_centre_fwts <-
as.numeric(
read_lines(
"/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/saved_attributes/attribute_centre_fwts_stateful_lag288.txt"
)
)
attribute_scale_fwts <-
as.numeric(
read_lines(
"/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/saved_attributes/attribute_scale_fwts_stateful_lag288.txt"
)
)
#Rescale Predictions using Saved Attributes for Each Feed
predictions_df$fwts_pred <-
(predictions_df$fwts_pred * attribute_scale_fwts + attribute_centre_fwts) ^ 2
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_set$y[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction[1:576])),
colour = 'blue') +
geom_line(aes(x=1:576, y = as.vector(predictions_df$fwts_pred[1:576])),
colour = 'green') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
# Cubist Algorithm
library(Cubist)
library(caTools)
library(rpart)
library (dplyr)
library(ggplot2)
library(caret)
library(rpart.plot)
library(reticulate)
library(keras)
library(readr)
setwd("~/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/Scaled Training Files")
#load data
x_vars <- read.csv("scaled_training_fwts_XVars.csv", header=TRUE, sep=",", na.strings=c("NA", "NULL"))
y_var <- read.csv("scaled_training_fwts_YVar.csv", header=TRUE, sep=",", na.strings=c("NA", "NULL"))
#merge files
x_vars$y <- as.numeric(paste(y_var$fwts))
#split in training and test sets
split <- sample.split(x_vars$y, SplitRatio = 0.8)
trainning_set <- subset(x_vars, split == TRUE)
test_set <- subset(x_vars, split == FALSE)
#train model
model_tree <- cubist(x = trainning_set[, -16], y = trainning_set$y)
#predictions
Prediction <- predict(model_tree, test_set)
#********************************************************#
#Load FWTS Model
fwts_lstm_model_lag288_mv <-
load_model_hdf5(
"/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/saved_models/Stateful_Lag288_FWTS_MV16_MODEL",
compile = TRUE
)
#create arrays
testX_sint_vector<- test_set$sint[1:576]
testX_sint_array <- array(data = testX_sint_vector,dim = c(length(testX_sint_vector),1,1))
testX_cost_vector<-test_set$cost[1:576]
testX_cost_array <- array(data = testX_cost_vector,dim = c(length(testX_cost_vector),1,1))
testX_temp_vector<-test_set$temp[1:576]
testX_temp_array <- array(data = testX_temp_vector,dim = c(length(testX_temp_vector),1,1))
testX_hum_vector<-test_set$hum[1:576]
testX_hum_array <- array(data = testX_hum_vector,dim = c(length(testX_hum_vector),1,1))
testX_dew_vector<-test_set$dew[1:576]
testX_dew_array <- array(data = testX_dew_vector,dim = c(length(testX_dew_vector),1,1))
testX_wspd_vector<-test_set$wspd[1:576]
testX_wspd_array <- array(data = testX_wspd_vector,dim = c(length(testX_wspd_vector),1,1))
testX_vis_vector<-test_set$vis[1:576]
testX_vis_array <- array(data = testX_vis_vector,dim = c(length(testX_vis_vector),1,1))
testX_pres_vector<-test_set$pres[1:576]
testX_pres_array <- array(data = testX_pres_vector,dim = c(length(testX_pres_vector),1,1))
testX_mon_vector<-test_set$mon[1:576]
testX_mon_array <- array(data = testX_mon_vector,dim = c(length(testX_mon_vector),1,1))
testX_tue_vector<-test_set$tue[1:576]
testX_tue_array <- array(data = testX_tue_vector,dim = c(length(testX_tue_vector),1,1))
testX_wed_vector<-test_set$wed[1:576]
testX_wed_array <- array(data = testX_wed_vector,dim = c(length(testX_wed_vector),1,1))
testX_thu_vector<-test_set$thu[1:576]
testX_thu_array <- array(data = testX_thu_vector,dim = c(length(testX_thu_vector),1,1))
testX_fri_vector<-test_set$fri[1:576]
testX_fri_array <- array(data = testX_fri_vector,dim = c(length(testX_fri_vector),1,1))
testX_sat_vector<-test_set$sat[1:576]
testX_sat_array <- array(data = testX_sat_vector,dim = c(length(testX_sat_vector),1,1))
testX_sun_vector<-test_set$sun[1:576]
testX_sun_array <- array(data = testX_sun_vector,dim = c(length(testX_sun_vector),1,1))
testX_fwts_vector<-test_set$y[1:576]
testX_fwts_array <- array(data = testX_fwts_vector,dim = c(length(testX_fwts_vector),1,1))
fwts_testX_input_list <- list(
testX_fwts_array,testX_temp_array,testX_dew_array,testX_hum_array,testX_wspd_array,testX_vis_array,testX_pres_array,testX_mon_array,testX_tue_array,testX_wed_array,testX_thu_array,testX_fri_array,testX_sat_array,testX_sun_array,testX_sint_array,testX_cost_array
)
#predictions FWTS Model
predictions_fwts <-
fwts_lstm_model_lag288_mv %>% predict(fwts_testX_input_list, batch_size = 72) %>% .[, 1]
pred_array_fwts <-
array(data = predictions_fwts, dim = c(length(predictions_fwts), 1, 1))
predictions_df <-
data.frame(matrix(ncol = 4, nrow = 576))
columns = c("datetime",
"brts_pred",
"fwts_pred",
"pats_pred")
predictions_df$fwts_pred <- predictions_fwts
attribute_centre_fwts <-
as.numeric(
read_lines(
"/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/saved_attributes/attribute_centre_fwts_stateful_lag288.txt"
)
)
attribute_scale_fwts <-
as.numeric(
read_lines(
"/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/saved_attributes/attribute_scale_fwts_stateful_lag288.txt"
)
)
#Rescale Predictions using Saved Attributes for Each Feed
predictions_df$fwts_pred <-
(predictions_df$fwts_pred * attribute_scale_fwts + attribute_centre_fwts) ^ 2
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_set$y[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction[1:576])),
colour = 'blue') +
geom_line(aes(x=1:576, y = as.vector(predictions_df$fwts_pred[1:576])),
colour = 'green') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
isualize
ggplot() +
geom_line(aes(x=1:576, y = test_set$y[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction[1:576])),
colour = 'blue') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
predictions_fwts
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_set$y[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction[1:576])),
colour = 'blue') +
geom_line(aes(x=1:576, y = as.vector(predictions_fwts[1:576])),
colour = 'green') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_set$y[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction[1:576])),
colour = 'blue') +
geom_line(aes(x=1:576, y = as.vector(predictions_fwts[1:576])),
colour = 'grey') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_set$y[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction[1:576])),
colour = 'blue') +
geom_line(aes(x=1:576, y = as.vector(predictions_fwts[1:576])),
colour = 'black') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_set$y[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction[1:576])),
colour = 'blue') +
geom_line(aes(x=1:576, y = as.vector(predictions_fwts[1:576])),
colour = 'green4') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
#predictions
Prediction_cubist <- predict(model_tree, test_set)
test_scaled_back<-
(test_scaled_back * attribute_scale_fwts + attribute_centre_fwts) ^ 2
Prediction_cubist<-
(Prediction_cubist * attribute_scale_fwts + attribute_centre_fwts) ^ 2
predictions_df$fwts_pred <-
(predictions_df$fwts_pred * attribute_scale_fwts + attribute_centre_fwts) ^ 2
test_scaled_back<-
(test_set$y * attribute_scale_fwts + attribute_centre_fwts) ^ 2
Prediction_cubist<-
(Prediction_cubist * attribute_scale_fwts + attribute_centre_fwts) ^ 2
predictions_df$fwts_pred <-
(predictions_df$fwts_pred * attribute_scale_fwts + attribute_centre_fwts) ^ 2
test_scaled_back<-
(test_set$y * attribute_scale_fwts + attribute_centre_fwts) ^ 2
test_scaled_back
Prediction_cubist
Prediction_cubist
visualize
ggplot() +
geom_line(aes(x=1:576, y = test_scaled_back[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction_cubist[1:576])),
colour = 'blue') +
geom_line(aes(x=1:576, y = as.vector(predictions_df[1:576])),
colour = 'green4') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_scaled_back[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction_cubist[1:576])),
colour = 'blue') +
geom_line(aes(x=1:576, y = as.vector(predictions_df$fwts_pred [1:576])),
colour = 'green4') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
Prediction_cubist<-
(Prediction_cubist * attribute_scale_fwts + attribute_centre_fwts) ^ 2
predictions_df$fwts_pred <-
(predictions_df$fwts_pred * attribute_scale_fwts + attribute_centre_fwts) ^ 2
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_scaled_back[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction_cubist[1:576])),
colour = 'blue') +
geom_line(aes(x=1:576, y = as.vector(predictions_df$fwts_pred [1:576])),
colour = 'green4') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_scaled_back[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction_cubist[1:576])),
colour = 'blue') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
test_scaled_back
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_scaled_back[1:576]),
colour = 'red')+
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_scaled_back[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction_cubist[1:576])),
colour = 'blue') +
geom_line(aes(x=1:576, y = as.vector(predictions_df$fwts_pred [1:576])),
colour = 'green4') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
#visualize
ggplot() +
geom_line(aes(x=1:576, y = test_scaled_back[1:576]),
colour = 'red')+
geom_line(aes(x=1:576, y = as.vector(Prediction_cubist[1:576])),
colour = 'blue') +
ggtitle('Cubist Algorithm') +
xlab('Time') +
ylab('Fwts')
View(test_set)
require("keras")
require("jsonlite")
require("lubridate")
require("recipes")
require("dplyr")
require("recipes")
require("curl")
require("tidyr")
require("readr")
require("plotly")
require("htmlwidgets")
require("shiny")
dataset_fwts <- read.csv("/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/trainingFile_fwts.csv", header=TRUE, sep=",")
#the part in quotations is the column name you are scaling
receipe_object_fwts <- recipe(dataset_fwts) %>%
step_sqrt("fwts") %>%
step_center("fwts") %>%
step_scale("fwts") %>%
prep()
data <- bake(receipe_object_fwts,dataset_fwts)
#****************Variables**************#
predictionDate <- as.Date(x = "2014-01-02")
yesterdayDate <- predictionDate-1
str_todayDate <- paste(predictionDate, "T", "00:00:00", sep = "")
url <-
paste(
"https://api.darksky.net/forecast/bc758d0b80bd80c01ee2e038288dd440/48.3809,-89.2477,",
str_todayDate,
"?units=ca&exclude=alerts,minutely,daily,flags,currently",
sep = ""
)
darkSky_df <-data.frame(fromJSON(url, simplifyDataFrame = TRUE))
#*****************Create dataframe to use as model input**********
input <-data.frame(matrix(ncol = 19, nrow = (nrow(darkSky_df))))
columns = c(
"datetime",
"time",
"fwts",
"ssm",
"sint",
"cost",
"temp",
"dew",
"hum",
"wspd",
"pres",
"vis",
"mon",
"tue",
"wed",
"thu",
"fri",
"sat",
"sun"
)
colnames(input) <- columns
#********************Insert Data into Data Frame***********************#
input$datetime <-
as.POSIXct(darkSky_df$hourly.data.time,
origin = "1970-01-01")
input$datetime<-input$datetime-(300*12*5)
input$temp <-
darkSky_df$hourly.data.temperature #as degress celcius
input$dew <-
darkSky_df$hourly.data.dewPoint #as degrees celcius
input$hum <-
darkSky_df$hourly.data.humidity #as decimal fraction
input$pres <-
darkSky_df$hourly.data.pressure/10 #as hectopascals
input$vis <- darkSky_df$hourly.data.visibility #in kilometers
input$wspd <-
darkSky_df$hourly.data.windSpeed #as kilometers per hour
#****Create a dataframe with all possible date/times at interval of 5 mins*****#
dateRange <-
data.frame(datetime = seq(min(input$datetime), max(input$datetime) + 3540, by = 5 *
60))
#*******************Right Join dateRange dataframe********************#
input <- input %>%
right_join(dateRange, by = "datetime") %>%
fill(temp, dew, hum, pres, wspd, vis)
#*********************Fill Time Column******************************#
input$time <- strftime(input$datetime, format = "%H:%M:%S")
#Transform Time into Sine & Cosine
seconds_in_day <- 24 * 60 * 60
input$ssm <-
(as.numeric(as.POSIXct(strptime(input$time, format = "%H:%M:%S"))) -  as.numeric(as.POSIXct(strptime("0", format = "%S"))))
input$sint <- sin(2 * pi * input$ssm / seconds_in_day)
input$cost <- cos(2 * pi * input$ssm / seconds_in_day)
#insert date column
dataset_fwts$date<-strftime(dataset_fwts$datetime, format="%Y-%m-%d")
dataset_fwts <- read.csv("/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/trainingFile_fwts.csv", header=TRUE, sep=",")
dataset_fwts <- read.csv("/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/trainingFile_fwts.csv", header=TRUE, sep=",")
#the part in quotations is the column name you are scaling
receipe_object_fwts <- recipe(dataset_fwts) %>%
step_sqrt("fwts") %>%
step_center("fwts") %>%
step_scale("fwts") %>%
prep()
data <- bake(receipe_object_fwts,dataset_fwts)
#****************Variables**************#
predictionDate <- as.Date(x = "2014-01-02")
yesterdayDate <- predictionDate-1
#****************TODAY's WEATHER Dark Sky API CALL**************#
str_todayDate <- paste(predictionDate, "T", "00:00:00", sep = "")
url <-
paste(
"https://api.darksky.net/forecast/bc758d0b80bd80c01ee2e038288dd440/48.3809,-89.2477,",
str_todayDate,
"?units=ca&exclude=alerts,minutely,daily,flags,currently",
sep = ""
)
darkSky_df <-data.frame(fromJSON(url, simplifyDataFrame = TRUE))
#*****************Create dataframe to use as model input**********
input <-data.frame(matrix(ncol = 19, nrow = (nrow(darkSky_df))))
columns = c(
"datetime",
"time",
"fwts",
"ssm",
"sint",
"cost",
"temp",
"dew",
"hum",
"wspd",
"pres",
"vis",
"mon",
"tue",
"wed",
"thu",
"fri",
"sat",
"sun"
)
colnames(input) <- columns
#********************Insert Data into Data Frame***********************#
input$datetime <-
as.POSIXct(darkSky_df$hourly.data.time,
origin = "1970-01-01")
input$datetime<-input$datetime-(300*12*5)
input$temp <-
darkSky_df$hourly.data.temperature #as degress celcius
input$dew <-
darkSky_df$hourly.data.dewPoint #as degrees celcius
input$hum <-
darkSky_df$hourly.data.humidity #as decimal fraction
input$pres <-
darkSky_df$hourly.data.pressure/10 #as hectopascals
input$vis <- darkSky_df$hourly.data.visibility #in kilometers
input$wspd <-
darkSky_df$hourly.data.windSpeed #as kilometers per hour
#****Create a dataframe with all possible date/times at interval of 5 mins*****#
dateRange <-
data.frame(datetime = seq(min(input$datetime), max(input$datetime) + 3540, by = 5 *
60))
#*******************Right Join dateRange dataframe********************#
input <- input %>%
right_join(dateRange, by = "datetime") %>%
fill(temp, dew, hum, pres, wspd, vis)
#*********************Fill Time Column******************************#
input$time <- strftime(input$datetime, format = "%H:%M:%S")
#Transform Time into Sine & Cosine
seconds_in_day <- 24 * 60 * 60
input$ssm <-
(as.numeric(as.POSIXct(strptime(input$time, format = "%H:%M:%S"))) -  as.numeric(as.POSIXct(strptime("0", format = "%S"))))
input$sint <- sin(2 * pi * input$ssm / seconds_in_day)
input$cost <- cos(2 * pi * input$ssm / seconds_in_day)
#insert date column
dataset_fwts$date<-strftime(dataset_fwts$datetime, format="%Y-%m-%d")
dataset_fwts <- read.csv("/Users/ivan/Google Drive/Degree Project/Repository/Hydro-Prediction-System/training_data/trainingFile_fwts.csv", header=TRUE, sep=",")
