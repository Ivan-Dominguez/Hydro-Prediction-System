)
)
attribute_scale_fwts <-
as.numeric(
read_lines(
"/Users/ivan/Google Drive/Degree Project/Repository/Hydro-prediction-System/training_data/saved_attributes/attribute_scale_fwts_stateful_lag288.txt"
)
)
#******************************* Rescale predictions ***************************************#
test_scaled_back<-
(test_set$fwts * attribute_scale_fwts + attribute_centre_fwts) ^ 2
prediction_cubist_scaled_back<-
(prediction_cubist * attribute_scale_fwts + attribute_centre_fwts) ^ 2
prediction_xgboost_scaled_back<-
(prediction_xgboost * attribute_scale_fwts + attribute_centre_fwts) ^ 2
prediction_neuralnet_scaled_back<-
(prediction_neuralnet$net.result * attribute_scale_fwts + attribute_centre_fwts) ^ 2
#LSTM
predictions_df$fwts_pred <-
(predictions_df$fwts_pred * attribute_scale_fwts + attribute_centre_fwts) ^ 2
#******************************* find peak values ***************************************#
#LSTM Predicted Daily Peak
ymax_fwts_pred = max(predictions_df$fwts_pred)
xcoord_fwts_pred <-
predictions_df$datetime[which.max(predictions_df$fwts_pred)]
#Cubist Predicted Daily Peak
ymax_cubist_pred = max(prediction_cubist_scaled_back[144:288])
xcoord_cubist_pred <-
predictions_df$datetime[which.max(prediction_cubist_scaled_back[144:288]) + 143]
#XGBoost Predicted Daily Peak
ymax_xgboost_pred = max(prediction_xgboost_scaled_back[144:288])
xcoord_xgboost_pred <-
predictions_df$datetime[which.max(prediction_xgboost_scaled_back[144:288]) + 143]
#neuralnet
ymax_neuralnet_pred = max(prediction_neuralnet_scaled_back[144:288])
xcoord_neuralnet_pred <-
predictions_df$datetime[which.max(prediction_neuralnet_scaled_back[144:288]) + 143]
#Test data peak
ymax_test_pred = max(test_scaled_back)
xcoord_test_pred <-
predictions_df$datetime[which.max(test_scaled_back)]
#******************************* visualize ***************************************#
pl <-
plot_ly(
mode = 'lines+markers'
) %>%
add_trace(
y =  ~ test_scaled_back,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "Test Data",
line = list(color = ("red"))
) %>%
add_trace(
y =  ~ predictions_df$fwts_pred,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "LSTM",
line = list(color = ("green"))
) %>%
add_trace(
y =  ~ prediction_cubist_scaled_back,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = ("blue"))
) %>%
add_trace(
y =  ~ prediction_xgboost_scaled_back,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "XGBoost",
line = list(color = ("orange"))
) %>%
add_trace(
y =  ~ prediction_neuralnet_scaled_back,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "Neural Network",
line = list(color = ("purple"))
) %>%
add_trace(
x =  ~ xcoord_test_pred,
y =  ~ ymax_test_pred,
mode = 'markers',
type = 'scatter',
name = paste("Real daily Peak",xcoord_test_pred),
marker = list(color = ("black"),size=9,symbol="triangle-up")
) %>%
add_trace(
x =  ~ xcoord_fwts_pred,
y =  ~ ymax_fwts_pred,
mode = 'markers',
type = 'scatter',
name = paste("LSTM Predicted Daily Peak",xcoord_fwts_pred),
marker = list(color = ("yellow"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ xcoord_cubist_pred,
y =  ~ ymax_cubist_pred,
mode = 'markers',
type = 'scatter',
name = paste("Cubist Predicted Daily Peak",xcoord_cubist_pred),
marker = list(color = ("orange"),size=9,symbol="square")
) %>%
add_trace(
x =  ~ xcoord_xgboost_pred,
y =  ~ ymax_xgboost_pred,
mode = 'markers',
type = 'scatter',
name = paste("XGBoost Predicted Daily Peak",xcoord_xgboost_pred),
marker = list(color = ("black"),size=9,symbol="square")
) %>%
add_trace(
x =  ~ xcoord_neuralnet_pred,
y =  ~ ymax_neuralnet_pred,
mode = 'markers',
type = 'scatter',
name = paste("Neural Network Predicted Daily Peak",xcoord_neuralnet_pred),
marker = list(color = ("black"),size=9,symbol="square")
) %>%
layout(
title = paste('prediction for', predictionDate),
xaxis = list(
title = 'Time',
autotick = TRUE,
showticklabels = TRUE
),
yaxis = list(title = "Power Consumption")
)
pl
neuralnet_model<-neuralnet(formula, data = training_set, hidden = 1,linear.output=T, stepmax=1e7)
prediction_neuralnet<-neuralnet::compute(neuralnet_model, test_set[-1])
prediction_neuralnet
neuralnet_model<-neuralnet(formula, data = training_set, hidden = 2,linear.output=T, stepmax=1e7)
prediction_neuralnet<-neuralnet::compute(neuralnet_model, test_set[-1])
prediction_neuralnet
neuralnet_model<-neuralnet(formula, data = training_set, hidden = c(15,2),linear.output=T, stepmax=1e7)
neuralnet_model<-neuralnet(formula, data = training_set, hidden = c(3,2),linear.output=T, stepmax=1e7)
#******************************* visualize ***************************************#
pl <-
plot_ly(
mode = 'lines+markers'
) %>%
add_trace(
y =  ~ test_scaled_back,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "Test Data",
line = list(color = ("red"))
) %>%
add_trace(
y =  ~ predictions_df$fwts_pred,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "LSTM",
line = list(color = ("green"))
) %>%
add_trace(
y =  ~ prediction_cubist_scaled_back,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = ("blue"))
) %>%
add_trace(
y =  ~ prediction_xgboost_scaled_back,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "XGBoost",
line = list(color = ("orange"))
) %>%
add_trace(
y =  ~ prediction_neuralnet_scaled_back,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "Neural Network",
line = list(color = ("purple"))
) %>%
add_trace(
x =  ~ xcoord_test_pred,
y =  ~ ymax_test_pred,
mode = 'markers',
type = 'scatter',
name = paste("Real daily Peak",xcoord_test_pred),
marker = list(color = ("black"),size=9,symbol="triangle-up")
) %>%
add_trace(
x =  ~ xcoord_fwts_pred,
y =  ~ ymax_fwts_pred,
mode = 'markers',
type = 'scatter',
name = paste("LSTM Predicted Daily Peak",xcoord_fwts_pred),
marker = list(color = ("yellow"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ xcoord_cubist_pred,
y =  ~ ymax_cubist_pred,
mode = 'markers',
type = 'scatter',
name = paste("Cubist Predicted Daily Peak",xcoord_cubist_pred),
marker = list(color = ("orange"),size=9,symbol="square")
) %>%
add_trace(
x =  ~ xcoord_xgboost_pred,
y =  ~ ymax_xgboost_pred,
mode = 'markers',
type = 'scatter',
name = paste("XGBoost Predicted Daily Peak",xcoord_xgboost_pred),
marker = list(color = ("black"),size=9,symbol="square")
) %>%
add_trace(
x =  ~ xcoord_neuralnet_pred,
y =  ~ ymax_neuralnet_pred,
mode = 'markers',
type = 'scatter',
name = paste("Neural Network Predicted Daily Peak",xcoord_neuralnet_pred),
marker = list(color = ("black"),size=9,symbol="square")
) %>%
layout(
title = paste('prediction for', predictionDate),
xaxis = list(
title = 'Time',
autotick = FALSE,
showticklabels = TRUE,
dtick = 1
),
yaxis = list(title = "Power Consumption")
)
#******************************* visualize ***************************************#
pl <-
plot_ly(
mode = 'lines+markers'
) %>%
add_trace(
y =  ~ test_scaled_back,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "Test Data",
line = list(color = ("red"))
) %>%
add_trace(
y =  ~ predictions_df$fwts_pred,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "LSTM",
line = list(color = ("green"))
) %>%
add_trace(
y =  ~ prediction_cubist_scaled_back,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = ("blue"))
) %>%
add_trace(
y =  ~ prediction_xgboost_scaled_back,
x =  ~ predictions_df$datetime,
mode = 'lines',
type = 'scatter',
name = "XGBoost",
line = list(color = ("orange"))
) %>%
# add_trace(
#   y =  ~ prediction_neuralnet_scaled_back,
#   x =  ~ predictions_df$datetime,
#   mode = 'lines',
#   type = 'scatter',
#   name = "Neural Network",
#   line = list(color = ("purple"))
# ) %>%
add_trace(
x =  ~ xcoord_test_pred,
y =  ~ ymax_test_pred,
mode = 'markers',
type = 'scatter',
name = paste("Real daily Peak", strftime(xcoord_test_pred,format="%H:%M:%S",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="triangle-up")
) %>%
add_trace(
x =  ~ xcoord_fwts_pred,
y =  ~ ymax_fwts_pred,
mode = 'markers',
type = 'scatter',
name = paste("LSTM Predicted Daily Peak", strftime(xcoord_fwts_pred,format="%H:%M:%S",tz="UTC")),
marker = list(color = ("yellow"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ xcoord_cubist_pred,
y =  ~ ymax_cubist_pred,
mode = 'markers',
type = 'scatter',
name = paste("Cubist Predicted Daily Peak", strftime(xcoord_cubist_pred,format="%H:%M:%S",tz="UTC")),
marker = list(color = ("orange"),size=9,symbol="square")
) %>%
add_trace(
x =  ~ xcoord_xgboost_pred,
y =  ~ ymax_xgboost_pred,
mode = 'markers',
type = 'scatter',
name = paste("XGBoost Predicted Daily Peak",strftime(xcoord_xgboost_pred,format="%H:%M:%S",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="square")
) %>%
# add_trace(
#   x =  ~ xcoord_neuralnet_pred,
#   y =  ~ ymax_neuralnet_pred,
#   mode = 'markers',
#   type = 'scatter',
#   name = paste("Neural Network Predicted Daily Peak",xcoord_neuralnet_pred),
#   marker = list(color = ("black"),size=9,symbol="square")
# ) %>%
layout(
title = paste('prediction for', predictionDate),
title = paste('prediction for', predictionDate),
xaxis = list(
title = 'Time',
autotick = TRUE,
showticklabels = TRUE
),
yaxis = list(title = "Power Consumption")
)
pl
pl
results <-
data.frame(matrix(ncol = 3, nrow = 1))
columns = c("LSTM",
"cubist",
"xgboost")
colnames(results) <- columns
results
ymax_test_pred
xcoord_test_pred
#dataframe
results <-data.frame(matrix(ncol = 2, nrow = 3))
columns = c("xcoord", "ycord")
colnames(results) <- columns
results <-data.frame(matrix(ncol = 2, nrow = 4))
columns = c("xcoord", "ycord")
colnames(results) <- columns
results$xcoord<-c(xcoord_test_pred, xcoord_xgboost_pred, xcoord_cubist_pred, xcoord_fwts_pred)
results
results <-data.frame(matrix(ncol = 2, nrow = 4))
columns = c("xcoord", "ycord")
colnames(results) <- columns
pred_times<-c(xcoord_test_pred, xcoord_xgboost_pred, xcoord_cubist_pred, xcoord_fwts_pred)
results$xcoord<-strftime(pred_times,format="%H:%M:%S",tz="UTC")
results
results<-strftime(pred_times,format="%H:%M:%S",tz="UTC")
results
str(results)
result[1]-1
results[1]-1
pred_times<-c(xcoord_xgboost_pred, xcoord_cubist_pred, xcoord_fwts_pred)
results<-pred_times
results
str(results)
results[1]-1
#dataframe
pred_times <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
pred_times(results) <- columns
pred_times<-c(xcoord_xgboost_pred, xcoord_cubist_pred, xcoord_fwts_pred)
#dataframe
pred_times <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
colnames(pred_times) <- columns
pred_times<-c(xcoord_xgboost_pred, xcoord_cubist_pred, xcoord_fwts_pred)
pred_times
#dataframe
pred_times <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
colnames(pred_times) <- columns
pred_times<-c(xcoord_xgboost_pred, xcoord_cubist_pred, xcoord_fwts_pred)
pred_times
#dataframe
pred_times <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
colnames(pred_times) <- columns
pred_times$xgboost<-xcoord_xgboost_pred
pred_times$cubist<-xcoord_cubist_pred
pred_times$LSTM<-xcoord_fwts_pred
pred_times
pred_times$xgboost - xcoord_test_pred
xcoord_test_pred
pred_times$xgboost[1]
xcoord_test_pred + 1.166666
xcoord_test_pred + 1.2
xcoord_test_pred + 1/86400
xcoord_test_pred + 1
xcoord_test_pred + 2
xcoord_test_pred + 60
xcoord_cubist_pred
xcoord_fwts_pred
pred_times$LSTM - xcoord_test_pred
column
for (column in 1:ncol(pred_times)){
print(column)
}
xcoord_cubist_pred - "2018-02-03 20:15:00 UTC"
for (column in 1:ncol(pred_times)){
for(row in 1:nrow(pred_times[,column])){
time_diff<-abs(pred[row, column] - xcoord_test_pred)
if(time_diff > time_limit){
results[row, column]<-results[row, column] + 1
}
}
results
results <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
colnames(results) <- columns
time_limit <- 15/60 #15 minutes
for (column in 1:ncol(pred_times)){
for(row in 1:nrow(pred_times[,column])){
time_diff<-abs(pred[row, column] - xcoord_test_pred)
if(time_diff > time_limit){
results[row, column]<-results[row, column] + 1
}
}
results
results
results <-data.frame(matrix(ncol = 3, nrow = 3))
results <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
colnames(results) <- columns
results <-data.frame(matrix(ncol = 3, nrow = 3))
results <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
colnames(results) <- columns
results <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
colnames(results) <- columns
results <-data.frame(matrix(ncol = 3, nrow = 3))
#dataframe
pred_times <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
colnames(pred_times) <- columns
pred_times$xgboost<-xcoord_xgboost_pred
pred_times$cubist<-xcoord_cubist_pred
pred_times$LSTM<-xcoord_fwts_pred
results <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
colnames(results) <- columns
time_limit <- 15/60 #15 minutes
for (column in 1:ncol(pred_times)){
for(row in 1:nrow(pred_times[,column])){
time_diff<-abs(pred[row, column] - xcoord_test_pred)
if(time_diff > time_limit){
results[row, column]<-results[row, column] + 1
}
}
}
results <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
colnames(results) <- columns
time_limit <- 15/60 #15 minutes
for (column in 1:ncol(pred_times)){
for(row in 1:nrow(pred_times[,column])){
time_diff<-abs(pred[row, column] - xcoord_test_pred)
if(time_diff > time_limit){
results[row, column]<-results[row, column] + 1
}
}
}
results<-0
results <-data.frame(matrix(ncol = 3, nrow = 3))
columns = c("xgboost", "cubist", "LSTM")
colnames(results) <- columns
results[is.na(resulst)]<-0
results[is.na(resulst)]<-0
View(results)
results[is.na(resulst)]<-0
results[is.na(results)]<-0
time_limit <- 15/60 #15 minutes
for (column in 1:ncol(pred_times)){
for(row in 1:nrow(pred_times[,column])){
time_diff<-abs(pred[row, column] - xcoord_test_pred)
if(time_diff > time_limit){
results[row, column]<-results[row, column] + 1
}
}
}
pred_times[,1]
pred_times[1,]
for (column in 1:ncol(pred_times)){
for(row in 1:nrow(pred_times)){
time_diff<-abs(pred[row, column] - xcoord_test_pred)
if(time_diff > time_limit){
results[row, column]<-results[row, column] + 1
}
}
}
for (column in 1:ncol(pred_times)){
for(row in 1:nrow(pred_times)){
time_diff<-abs(pred_times[row, column] - xcoord_test_pred)
if(time_diff > time_limit){
results[row, column]<-results[row, column] + 1
}
}
}
