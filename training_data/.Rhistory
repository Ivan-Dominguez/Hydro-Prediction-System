<<<<<<< HEAD
y =  ~ pred_list$xgboost,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "XGBoost",
line = list(color = ("blue"))
)
}
return(pl)
}
runApp('Dashboard.R')
runApp('Dashboard.R')
plot2<-function(pred_list, predictionDate){
pl <-
plot_ly(
mode = 'lines+markers'
) %>%
layout(
title = paste(predictionDate),
xaxis = list(
title = 'Time',
autotick = TRUE,
showticklabels = TRUE
),
yaxis = list(title = "Power Consumption")
)
if(TRUE){
pl<- add_trace(
pl,
y =  ~ pred_list$cubist,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = 'rgb(255, 0, 255)')
)
}
if(TRUE){
pl<-add_trace(
pl,
y =  ~ pred_list$xgboost,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "XGBoost",
line = list(color = ("blue"))
)
}
return(pl)
}
plot2<-function(pred_list, predictionDate){
pl <-
plot_ly(
mode = 'lines+markers'
) %>%
layout(
title = paste(predictionDate),
xaxis = list(
title = 'Time',
autotick = TRUE,
showticklabels = TRUE
),
yaxis = list(title = "Power Consumption")
)
if(TRUE){
pl<- add_trace(
pl,
y =  ~ pred_list$cubist,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = 'rgb(255, 0, 255)')
)
}
if(TRUE){
pl<-add_trace(
pl,
y =  ~ pred_list$xgboost,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "XGBoost",
line = list(color = ("blue"))
)
}
return(pl)
}
runApp('Dashboard.R')
plot2<-function(pred_list, predictionDate){
pl <-
plot_ly(
mode = 'lines+markers'
) %>%
layout(
title = paste(predictionDate),
xaxis = list(
title = 'Time',
autotick = TRUE,
showticklabels = TRUE
),
yaxis = list(title = "Power Consumption")
)
if(TRUE){
pl<- add_trace(
pl,
y =  ~ pred_list$cubist,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = 'rgb(255, 0, 255)')
)%>%
add_trace(
x =  ~ pred_list$xcoord_list$cubist,
y =  ~ pred_list$ymax_list$cubist,
mode = 'markers',
type = 'scatter',
name = paste("Cubist Predicted Peak", strftime(pred_list$xcoord_list$cubist,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
)
}
if(TRUE){
pl<-add_trace(
pl,
y =  ~ pred_list$xgboost,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "XGBoost",
line = list(color = ("blue"))
)%>%
add_trace(
x =  ~ pred_list$xcoord_list$xgboost,
y =  ~ pred_list$ymax_list$xgboost,
mode = 'markers',
type = 'scatter',
name = paste("XGBoost Predicted Peak",strftime(pred_list$xcoord_list$xgboost,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
)
}
return(pl)
}
runApp('Dashboard.R')
runApp('Dashboard.R')
plot2<-function(pred_list, predictionDate){
pl <-
plot_ly(
mode = 'lines+markers'
) %>%
layout(
title = paste(predictionDate),
=======
type = 'scatter',
name = paste("RF Predicted Daily Peak",RFcoord_fwts_pred),
marker = list(color = ("green"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ XGcoord_pred,
y =  ~ XGmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("XGboost Predicted Daily Peak",XGcoord_pred),
marker = list(color = ("blue"),size=9,symbol="circle")
) %>%
add_trace(
y =  ~ as.vector(y_pred3),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = ("pink"))
)%>%
add_trace(
x =  ~ CUcoord_pred,
y =  ~ CUmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("Cubist Predicted Daily Peak",CUcoord_pred),
marker = list(color = ("pink"),size=9,symbol="circle")
)%>%
add_trace(
y =  ~ as.vector(y_pred4),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "Deep Learning",
line = list(color = ("red"))
)%>%
add_trace(
x =  ~ DLcoord_pred,
y =  ~ DLmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("Deep Learning Predicted Daily Peak",DLcoord_pred),
marker = list(color = ("red"),size=9,symbol="circle")
)%>%
add_trace(
y =  ~ as.vector(y_pred5),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "Average of models",
line = list(color = ("yellow"))
)%>%
add_trace(
x =  ~ MEDIAN_pred,
y =  ~ 58000,
mode = 'markers',
type = 'scatter',
name = paste("Mean of peak time of models Predicted Daily Peak",MEDIAN_pred),
marker = list(color = ("orange"),size=9,symbol="circle")
)%>%
add_trace(
x =  ~ AVEcoord_pred,
y =  ~ AVEmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("AVERAGE of models Predicted Daily Peak",AVEcoord_pred),
marker = list(color = ("yellow"),size=9,symbol="circle")
) %>%
layout(
title = paste('Prediction for',as.Date(prediction_date)),
>>>>>>> d0795a3ec448948cfb0580b4e5dfd6ed7d0ae217
xaxis = list(
title = 'Time',
autotick = TRUE,
showticklabels = TRUE
),
yaxis = list(title = "Power Consumption")
)
<<<<<<< HEAD
######################## curves #####################
#cubist
if(TRUE){
pl<- add_trace(
pl,
y =  ~ pred_list$cubist,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = 'rgb(255, 0, 255)')
)
}
#XGBoost
if(TRUE){
pl<-add_trace(
pl,
y =  ~ pred_list$xgboost,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "XGBoost",
line = list(color = ("blue"))
)
}
######################## peaks #####################
if(TRUE){
pl<- add_trace(
add_trace(
x =  ~ pred_list$xcoord_list$cubist,
y =  ~ pred_list$ymax_list$cubist,
mode = 'markers',
type = 'scatter',
name = paste("Cubist Predicted Peak", strftime(pred_list$xcoord_list$cubist,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
)
)
if(TRUE){
pl<- add_trace(
add_trace(
x =  ~ pred_list$xcoord_list$xgboost,
y =  ~ pred_list$ymax_list$xgboost,
mode = 'markers',
type = 'scatter',
name = paste("XGBoost Predicted Peak",strftime(pred_list$xcoord_list$xgboost,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
)
)
return(pl)
}
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
plot2<-function(pred_list, predictionDate){
pl <-
plot_ly(
mode = 'lines+markers'
) %>%
layout(
title = paste(predictionDate),
xaxis = list(
title = 'Time',
autotick = TRUE,
showticklabels = TRUE
),
yaxis = list(title = "Power Consumption")
)
######################## curves #####################
#cubist
if(TRUE){
pl<- add_trace(
pl,
y =  ~ pred_list$cubist,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = 'rgb(255, 0, 255)')
)
}
#XGBoost
if(TRUE){
pl<-add_trace(
pl,
y =  ~ pred_list$xgboost,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "XGBoost",
line = list(color = ("blue"))
)
}
######################## peaks #####################
if(TRUE){
pl<- add_trace(
add_trace(
x =  ~ pred_list$xcoord_list$cubist,
y =  ~ pred_list$ymax_list$cubist,
mode = 'markers',
type = 'scatter',
name = paste("Cubist Predicted Peak", strftime(pred_list$xcoord_list$cubist,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
)
)
if(TRUE){
pl<- add_trace(
add_trace(
x =  ~ pred_list$xcoord_list$xgboost,
y =  ~ pred_list$ymax_list$xgboost,
mode = 'markers',
type = 'scatter',
name = paste("XGBoost Predicted Peak",strftime(pred_list$xcoord_list$xgboost,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
)
)
return(pl)
}
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
pl<- add_trace(
pl,
y =  ~ pred_list$cubist,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = 'rgb(255, 0, 255)')
)
plot2<-function(pred_list, predictionDate){
pl <-
plot_ly(
mode = 'lines+markers'
) %>%
layout(
title = paste(predictionDate),
=======
pl
output=paste("G:/degree project/OUTPUT/test2/",prediction_date,".html", sep="")
htmlwidgets::saveWidget(pl, output)
i=i+1;
}
View(pred_times)
while(i<356){
prediction_date=prediction_date+1;
day_before<-prediction_date - 1
last_30days_date <- prediction_date - 60
#dates to string
day_before_str<-as.character.Date(day_before)
last_30days_date_str<-as.character.Date(last_30days_date)
#boundaries
training_beginning<-data %>% filter(str_detect(datetime, last_30days_date_str))
training_end<-data %>% filter(str_detect(datetime, day_before_str))
start<-training_beginning$X[1]
end<-training_end$X[288]
######################################### train/test sets  AND Model ############################################
training_set_real<-data[start:end,]
training_set<-training_set_real[,c(-1,-2,-19,-20)]
test_set_real<-data %>% filter(str_detect(datetime, toString(prediction_date)))
test_set<-test_set_real[,c(-1,-2,-19,-20)]
#########################################################
model3<-cubist(x = training_set[-1], y = training_set$fwts, committees = 20, neighbors = 5)
scale_training_set<-training_set
scale_training_set[1]<-scale(training_set[1])
scale_scale=attr(scale(training_set[1]), 'scaled:scale')
scale_center=attr(scale(training_set[1]), 'scaled:center')
model4<-h2o.deeplearning(y='fwts',
x=c('temp','dew','hum','wspd','vis','pres','mon','tue','wed','thu','fri','sat','sun','sint','cost'),
activation = 'Rectifier',
training_frame=as.h2o(as.matrix(scale_training_set)),
hidden=c(10,10),
epochs=100,
train_samples_per_iteration=-2
)
variables=c('temp','dew','hum','wspd','vis','pres','mon','tue','wed','thu','fri','sat','sun','sint','cost')
model1<-h2o.randomForest(x=variables,
y="fwts",
ntrees=500,
max_depth=10,
training_frame=as.h2o(training_set),
seed=1242525
)
model2 = xgboost(data = as.matrix(training_set[-1]), label = training_set$fwts,  nrounds = 100)
mat<-xgb.importance (feature_names = colnames(training_set[-1]),model = model2)
y_pred2 = predict(model2, newdata = as.matrix(test_set[-1]))
y_pred1 = predict(model1, newdata = as.h2o(test_set[-1]))
y_pred3 = predict(model3, (test_set[-1]))
y_pred4 = predict(model4,newdata=as.h2o(test_set[-1]))
y_pred4 = y_pred4*scale_scale+scale_center
y_pred5 = (as.vector(y_pred1)+y_pred2+y_pred3+as.vector(y_pred4))/4
#visualize
#RF Predicted Daily Peaky
RFmax_fwts_pred = max(as.vector(y_pred1)[144:288])
RFcoord_fwts_pred <-
test_set_real$datetime[which.max(as.vector(y_pred1)[144:288])+143]
#XG Predicted Daily Peak
XGmax_pred = max(as.vector(y_pred2)[144:288])
XGcoord_pred <-
test_set_real$datetime[which.max(as.vector(y_pred2)[144:288])+143]
#Test data peak
ymax_test_pred = max(test_set$fwts[144:288])
xcoord_test_pred <-
test_set_real$datetime[which.max(test_set$fwts[144:288])+143]
#Cubist Predicted Daily Peak
CUmax_pred = max(as.vector(y_pred3)[144:288])
CUcoord_pred <-
test_set_real$datetime[which.max(as.vector(y_pred3)[144:288])+143]
#DeepLearning Predicted Daily Peak
DLmax_pred = max(as.vector(y_pred4)[144:288])
DLcoord_pred <-
test_set_real$datetime[which.max(as.vector(y_pred4)[144:288])+143]
#Average of 4 models
AVEmax_pred = max(as.vector(y_pred5)[144:288])
AVEcoord_pred <-
test_set_real$datetime[which.max(as.vector(y_pred5)[144:288])+143]
#Median of peak time
MEDIAN_pred <- strptime(prediction_date, "%Y-%m-%d")-mean(difftime(
paste(prediction_date, "00:00:00", sep=" "),
c(RFcoord_fwts_pred,DLcoord_pred,XGcoord_pred,CUcoord_pred),
units = "secs"
))
MEDIAN_pred <-as.character(MEDIAN_pred)
#store difference
pred_times$xgboost[i]=XGcoord_pred
pred_times$cubist[i]=CUcoord_pred
pred_times$deepLearning[i]=DLcoord_pred
pred_times$rf[i]=RFcoord_fwts_pred
pred_times$avg[i]=AVEcoord_pred
pred_times$median[i]=MEDIAN_pred
pred_times$real_peak[i]=xcoord_test_pred
pred_times$Date[i]=as.character(prediction_date)
pl <-
plot_ly(
mode = 'lines+markers'
) %>%
add_trace(
y =  ~ test_set$fwts,
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "Test Data",
line = list(color = ("black"))
) %>%
add_trace(
y =  ~ as.vector(y_pred1),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "RF",
line = list(color = ("green"))
) %>%
add_trace(
y =  ~ as.vector(y_pred2),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "XGboost",
line = list(color = ("blue"))
) %>%
add_trace(
x =  ~ xcoord_test_pred,
y =  ~ ymax_test_pred,
mode = 'markers',
type = 'scatter',
name = paste("Real daily Peak",xcoord_test_pred),
marker = list(color = ("black"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ RFcoord_fwts_pred,
y =  ~ RFmax_fwts_pred,
mode = 'markers',
type = 'scatter',
name = paste("RF Predicted Daily Peak",RFcoord_fwts_pred),
marker = list(color = ("green"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ XGcoord_pred,
y =  ~ XGmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("XGboost Predicted Daily Peak",XGcoord_pred),
marker = list(color = ("blue"),size=9,symbol="circle")
) %>%
add_trace(
y =  ~ as.vector(y_pred3),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = ("pink"))
)%>%
add_trace(
x =  ~ CUcoord_pred,
y =  ~ CUmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("Cubist Predicted Daily Peak",CUcoord_pred),
marker = list(color = ("pink"),size=9,symbol="circle")
)%>%
add_trace(
y =  ~ as.vector(y_pred4),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "Deep Learning",
line = list(color = ("red"))
)%>%
add_trace(
x =  ~ DLcoord_pred,
y =  ~ DLmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("Deep Learning Predicted Daily Peak",DLcoord_pred),
marker = list(color = ("red"),size=9,symbol="circle")
)%>%
add_trace(
y =  ~ as.vector(y_pred5),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "Average of models",
line = list(color = ("yellow"))
)%>%
add_trace(
x =  ~ MEDIAN_pred,
y =  ~ 58000,
mode = 'markers',
type = 'scatter',
name = paste("Mean of peak time of models Predicted Daily Peak",MEDIAN_pred),
marker = list(color = ("orange"),size=9,symbol="circle")
)%>%
add_trace(
x =  ~ AVEcoord_pred,
y =  ~ AVEmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("AVERAGE of models Predicted Daily Peak",AVEcoord_pred),
marker = list(color = ("yellow"),size=9,symbol="circle")
) %>%
layout(
title = paste('Prediction for',as.Date(prediction_date)),
>>>>>>> d0795a3ec448948cfb0580b4e5dfd6ed7d0ae217
xaxis = list(
title = 'Time',
autotick = TRUE,
showticklabels = TRUE
),
yaxis = list(title = "Power Consumption")
)
<<<<<<< HEAD
######################## curves #####################
#cubist
if(TRUE){
pl<- add_trace(
pl,
y =  ~ pred_list$cubist,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = 'rgb(255, 0, 255)')
)
}
#XGBoost
if(TRUE){
pl<-add_trace(
pl,
y =  ~ pred_list$xgboost,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "XGBoost",
line = list(color = ("blue"))
)
}
######################## peaks #####################
#cubist
if(TRUE){
pl<- add_trace(
add_trace(
x =  ~ pred_list$xcoord_list$cubist,
y =  ~ pred_list$ymax_list$cubist,
mode = 'markers',
type = 'scatter',
name = paste("Cubist Predicted Peak", strftime(pred_list$xcoord_list$cubist,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
)
)
#XGBoost
if(TRUE){
pl<- add_trace(
add_trace(
x =  ~ pred_list$xcoord_list$xgboost,
y =  ~ pred_list$ymax_list$xgboost,
mode = 'markers',
type = 'scatter',
name = paste("XGBoost Predicted Peak",strftime(pred_list$xcoord_list$xgboost,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
)
)
return(pl)
}
daily_plot<-function(pred_list, predictionDate){
=======
pl
output=paste("G:/degree project/OUTPUT/test2/",prediction_date,".html", sep="")
htmlwidgets::saveWidget(pl, output)
i=i+1;
}
while(i<356){
prediction_date=prediction_date+1;
day_before<-prediction_date - 1
last_30days_date <- prediction_date - 60
#dates to string
day_before_str<-as.character.Date(day_before)
last_30days_date_str<-as.character.Date(last_30days_date)
#boundaries
training_beginning<-data %>% filter(str_detect(datetime, last_30days_date_str))
training_end<-data %>% filter(str_detect(datetime, day_before_str))
start<-training_beginning$X[1]
end<-training_end$X[288]
######################################### train/test sets  AND Model ############################################
training_set_real<-data[start:end,]
training_set<-training_set_real[,c(-1,-2,-19,-20)]
test_set_real<-data %>% filter(str_detect(datetime, toString(prediction_date)))
test_set<-test_set_real[,c(-1,-2,-19,-20)]
#########################################################
model3<-cubist(x = training_set[-1], y = training_set$fwts, committees = 20, neighbors = 5)
scale_training_set<-training_set
scale_training_set[1]<-scale(training_set[1])
scale_scale=attr(scale(training_set[1]), 'scaled:scale')
scale_center=attr(scale(training_set[1]), 'scaled:center')
model4<-h2o.deeplearning(y='fwts',
x=c('temp','dew','hum','wspd','vis','pres','mon','tue','wed','thu','fri','sat','sun','sint','cost'),
activation = 'Rectifier',
training_frame=as.h2o(as.matrix(scale_training_set)),
hidden=c(10,10),
epochs=100,
train_samples_per_iteration=-2
)
variables=c('temp','dew','hum','wspd','vis','pres','mon','tue','wed','thu','fri','sat','sun','sint','cost')
model1<-h2o.randomForest(x=variables,
y="fwts",
ntrees=500,
max_depth=10,
training_frame=as.h2o(training_set),
seed=1242525
)
model2 = xgboost(data = as.matrix(training_set[-1]), label = training_set$fwts,  nrounds = 100)
mat<-xgb.importance (feature_names = colnames(training_set[-1]),model = model2)
y_pred2 = predict(model2, newdata = as.matrix(test_set[-1]))
y_pred1 = predict(model1, newdata = as.h2o(test_set[-1]))
y_pred3 = predict(model3, (test_set[-1]))
y_pred4 = predict(model4,newdata=as.h2o(test_set[-1]))
y_pred4 = y_pred4*scale_scale+scale_center
y_pred5 = (as.vector(y_pred1)+y_pred2+y_pred3+as.vector(y_pred4))/4
#visualize
#RF Predicted Daily Peaky
RFmax_fwts_pred = max(as.vector(y_pred1)[144:288])
RFcoord_fwts_pred <-
test_set_real$datetime[which.max(as.vector(y_pred1)[144:288])+143]
#XG Predicted Daily Peak
XGmax_pred = max(as.vector(y_pred2)[144:288])
XGcoord_pred <-
test_set_real$datetime[which.max(as.vector(y_pred2)[144:288])+143]
#Test data peak
ymax_test_pred = max(test_set$fwts[144:288])
xcoord_test_pred <-
test_set_real$datetime[which.max(test_set$fwts[144:288])+143]
#Cubist Predicted Daily Peak
CUmax_pred = max(as.vector(y_pred3)[144:288])
CUcoord_pred <-
test_set_real$datetime[which.max(as.vector(y_pred3)[144:288])+143]
#DeepLearning Predicted Daily Peak
DLmax_pred = max(as.vector(y_pred4)[144:288])
DLcoord_pred <-
test_set_real$datetime[which.max(as.vector(y_pred4)[144:288])+143]
#Average of 4 models
AVEmax_pred = max(as.vector(y_pred5)[144:288])
AVEcoord_pred <-
test_set_real$datetime[which.max(as.vector(y_pred5)[144:288])+143]
#Median of peak time
MEDIAN_pred <- strptime(prediction_date, "%Y-%m-%d")-mean(difftime(
paste(prediction_date, "00:00:00", sep=" "),
c(RFcoord_fwts_pred,DLcoord_pred,XGcoord_pred,CUcoord_pred),
units = "secs"
))
MEDIAN_pred <-as.character(MEDIAN_pred)
#store difference
pred_times$xgboost[i]=XGcoord_pred
pred_times$cubist[i]=CUcoord_pred
pred_times$deepLearning[i]=DLcoord_pred
pred_times$rf[i]=RFcoord_fwts_pred
pred_times$avg[i]=AVEcoord_pred
pred_times$median[i]=MEDIAN_pred
pred_times$real_peak[i]=xcoord_test_pred
pred_times$Date[i]=as.character(prediction_date)
>>>>>>> d0795a3ec448948cfb0580b4e5dfd6ed7d0ae217
pl <-
plot_ly(
mode = 'lines+markers'
) %>%
add_trace(
<<<<<<< HEAD
y =  ~ pred_list$cubist,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = 'rgb(255, 0, 255)')
) %>%
add_trace(
y =  ~ pred_list$xgboost,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "XGBoost",
line = list(color = ("blue"))
) %>%
add_trace(
y =  ~ pred_list$DL,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "Deep Learning",
line = list(color = 'rgb(255, 128, 0)')
) %>%
add_trace(
y =  ~ pred_list$RF,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "Random Forest",
line = list(color = ("green"))
) %>%
add_trace(
y =  ~ pred_list$AVG,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "AVG",
line = list(color = 'rgb(255, 215, 0)')
) %>%
add_trace(
y =  ~ pred_list$test,
x =  ~ pred_list$hours,
mode = 'lines',
type = 'scatter',
name = "Test Data",
line = list(color = ("black"))
) %>%
add_trace(
x =  ~ pred_list$xcoord_list$cubist,
y =  ~ pred_list$ymax_list$cubist,
mode = 'markers',
type = 'scatter',
name = paste("Cubist Predicted Peak", strftime(pred_list$xcoord_list$cubist,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ pred_list$xcoord_list$xgboost,
y =  ~ pred_list$ymax_list$xgboost,
mode = 'markers',
type = 'scatter',
name = paste("XGBoost Predicted Peak",strftime(pred_list$xcoord_list$xgboost,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ pred_list$xcoord_list$DL,
y =  ~ pred_list$ymax_list$DL,
mode = 'markers',
type = 'scatter',
name = paste("Deep Learning Predicted Peak",strftime(pred_list$xcoord_list$DL,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ pred_list$xcoord_list$RF,
y =  ~ pred_list$ymax_list$RF,
mode = 'markers',
type = 'scatter',
name = paste("Random Forest Predicted Peak",strftime(pred_list$xcoord_list$RF,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ pred_list$xcoord_list$avg,
y =  ~ pred_list$ymax_list$avg,
mode = 'markers',
type = 'scatter',
name = paste("AVG Predicted Peak", strftime(pred_list$xcoord_list$avg,format="%H:%M",tz="UTC")),
marker = list(color = ("black"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ pred_list$xcoord_list$test,
y =  ~ pred_list$ymax_list$test,
mode = 'markers',
type = 'scatter',
name = paste("Real Peak", strftime(pred_list$xcoord_list$test,format="%H:%M",tz="UTC")),
marker = list(color = ("red"),size=13,symbol="triangle-up")
) %>%
add_trace(
x =  ~ pred_list$xcoord_list$mean,
y =  ~ pred_list$ymax_list$test + 2000,
mode = 'markers',
type = 'scatter',
name = paste("Mean",strftime(pred_list$xcoord_list$mean,format="%H:%M",tz="UTC")),
marker = list(color = 'rgb(0, 191, 255)',size=9,symbol="square")
) %>%
layout(
title = paste(predictionDate),
=======
y =  ~ test_set$fwts,
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "Test Data",
line = list(color = ("black"))
) %>%
add_trace(
y =  ~ as.vector(y_pred1),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "RF",
line = list(color = ("green"))
) %>%
add_trace(
y =  ~ as.vector(y_pred2),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "XGboost",
line = list(color = ("blue"))
) %>%
add_trace(
x =  ~ xcoord_test_pred,
y =  ~ ymax_test_pred,
mode = 'markers',
type = 'scatter',
name = paste("Real daily Peak",xcoord_test_pred),
marker = list(color = ("black"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ RFcoord_fwts_pred,
y =  ~ RFmax_fwts_pred,
mode = 'markers',
type = 'scatter',
name = paste("RF Predicted Daily Peak",RFcoord_fwts_pred),
marker = list(color = ("green"),size=9,symbol="circle")
) %>%
add_trace(
x =  ~ XGcoord_pred,
y =  ~ XGmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("XGboost Predicted Daily Peak",XGcoord_pred),
marker = list(color = ("blue"),size=9,symbol="circle")
) %>%
add_trace(
y =  ~ as.vector(y_pred3),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "Cubist",
line = list(color = ("pink"))
)%>%
add_trace(
x =  ~ CUcoord_pred,
y =  ~ CUmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("Cubist Predicted Daily Peak",CUcoord_pred),
marker = list(color = ("pink"),size=9,symbol="circle")
)%>%
add_trace(
y =  ~ as.vector(y_pred4),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "Deep Learning",
line = list(color = ("red"))
)%>%
add_trace(
x =  ~ DLcoord_pred,
y =  ~ DLmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("Deep Learning Predicted Daily Peak",DLcoord_pred),
marker = list(color = ("red"),size=9,symbol="circle")
)%>%
add_trace(
y =  ~ as.vector(y_pred5),
x =  ~ test_set_real$datetime,
mode = 'lines',
type = 'scatter',
name = "Average of models",
line = list(color = ("yellow"))
)%>%
add_trace(
x =  ~ MEDIAN_pred,
y =  ~ 58000,
mode = 'markers',
type = 'scatter',
name = paste("Mean of peak time of models Predicted Daily Peak",MEDIAN_pred),
marker = list(color = ("orange"),size=9,symbol="circle")
)%>%
add_trace(
x =  ~ AVEcoord_pred,
y =  ~ AVEmax_pred,
mode = 'markers',
type = 'scatter',
name = paste("AVERAGE of models Predicted Daily Peak",AVEcoord_pred),
marker = list(color = ("yellow"),size=9,symbol="circle")
) %>%
layout(
title = paste('Prediction for',as.Date(prediction_date)),
>>>>>>> d0795a3ec448948cfb0580b4e5dfd6ed7d0ae217
xaxis = list(
title = 'Time',
autotick = TRUE,
showticklabels = TRUE
),
yaxis = list(title = "Power Consumption")
)
pl
<<<<<<< HEAD
return(pl)
}
runApp('Dashboard.R')
runApp('Dashboard.R')
source('driver_program.R')
source('driver_program.R')
#source('daily_plot_fcn.R')
source('plot2.R')
#source('daily_plot_fcn.R')
source('plot2.R')
#source('daily_plot_fcn.R')
source('plot2.R')
#source('daily_plot_fcn.R')
source('plot2.R')
#source('daily_plot_fcn.R')
source('plot2.R')
#open dashboard in browser
runApp('Dashboard.R', launch.browser = TRUE)
source('driver_program.R')
source('driver_program.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
source('driver_program.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
source('driver_program.R')
source('driver_program.R')
source('driver_program.R')
source('driver_program.R')
source('driver_program.R')
=======
output=paste("G:/degree project/OUTPUT/test2/",prediction_date,".html", sep="")
htmlwidgets::saveWidget(pl, output)
i=i+1;
}
library(shiny); source('GitHub/Hydro-Prediction-System/training_data/driver_program.R')
source('GitHub/Hydro-Prediction-System/training_data/driver_program.R')
source('GitHub/Hydro-Prediction-System/training_data/driver_program.R')
source('GitHub/Hydro-Prediction-System/training_data/driver_program.R')
source('GitHub/Hydro-Prediction-System/training_data/driver_program.R')
install.packages("rpart.plot")
source('~/GitHub/Hydro-Prediction-System/training_data/driver_program.R')
source('~/GitHub/Hydro-Prediction-System/training_data/driver_program.R')
source('~/GitHub/Hydro-Prediction-System/training_data/driver_program.R')
>>>>>>> d0795a3ec448948cfb0580b4e5dfd6ed7d0ae217
